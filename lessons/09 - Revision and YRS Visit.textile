h1. Revision and visit from a local young developer

h2. HTML revision

HyperText Markup Language.  Content and structure.

h4. Lesson 1

<pre><code><title>
<h1> .. <h6>
<p>
<i>
<b>
<em>
<strong>
<mark>
<article>
<section>
<header>
<footer></code></pre>

h4. Lesson 2

Absolute and Relative links, images
<pre><code><a href="http://www.st-marks.e-sussex.sch.uk">My School</a>
<img src="http://www.st-marks.e-sussex.sch.uk/Images/St%20Marks%20Logo.gif" /></code></pre>

Ordered @<ol>@ and unordered @<ul>@ lists and items @<li>@ in them

h2. CSS Revision

Cascading Style Sheets.  Styling - appearance.

h4. Lesson 1

selector { property : value ; [property : value ;] }
@color@
@background-color@

Where you put your CSS 
* inline @<p style="color:red;">Hello World</p>@
* internal style sheets @<style type="text/css">p{color:red;}</style>@
* external style sheets @<link rel="stylesheet" type="text/css" href="mycss.css">@

h4. Lesson 2 (mostly spent on external style sheet practice)

@font-style@ (normal, italic)
@font-weight@ (normal, bold, bolder, lighter)
@text-align@ (left, right, center, justify)

h2. Javascript Revision

h4. Lesson 1

@var myName = "John";@
Output: @document.write()@, @console.log()@, @alert()@, @confirm()@
Operators: @+*/-%@
Repetition: @for(i=0;i<5;i++) { }@
Comparison operators: @>@, @<@, @>=@, @<=@, @===@, @!==@
Branching: @if() { }@ [@else if() { }@] [@else { }@]

h4. Lesson 2

Canvas
<pre><code><canvas id="canvas1" width="400" height="300">
Your browser doesn't support the HTML5 element canvas.</canvas>
var ctx = document.getElementById('canvas1').getContext('2d');</code></pre>

Context attributes
<pre><code>fillStyle
strokeStyle
lineWidth</code></pre>
Context methods
<pre><code>fillRect(x,y,w,h)
strokeRect(x,y,w,h)
clearRect(x,y,w,h)</code></pre>

Comments  // and /* ... */
Debugging in the console
REPL in the console Read Evaluate Print Loop

h2. A new way of doing colour which we need for later in the lesson

An HSL color value is specified with: @hsl(hue, saturation, lightness)@.

* *Hue* is a degree on the color wheel (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue. 
* *Saturation* is a percentage value; 0% means a shade of gray and 100% is the full color. 
* *Lightness* is also a percentage; 0% is black, 100% is white.

h4. Demonstration

<pre><code><html>
<head>
<script>
window.onload = function() {
  var ctx =document.getElementById("canvas").getContext('2d');

  var saturation=100;
  var lightness=50;

  for (i=0;  i <= 360; i+= 15) {
      ctx.fillStyle = "hsl(" + i + ", " +saturation+ "%," +lightness+ "%)";
      ctx.fillRect(i,0,15,300);
      }
  }

</script>
<title>Javascript Revision</title>
</head>
<body>
<canvas id="canvas" width="400" height="300">
Your browser doesn't support the HTML5 element canvas.
</canvas>
</body>
</html></code></pre>

Notice that we are using a different way of getting the browser to run our javascript - we are making use of the *onload* event of the *window* object.

h4. Question

What do you think about the line @ctx.fillStyle = "hsl(" + i + ", " +saturation+ "%," +lightness+ "%)";@?  How could it be improved?

h2. Harry from UCTC and YRS

* How I started coding, what I have done, 
* Young Rewired State

h2. Some Mathematical fun

The mandelbrot set is a set of numbers which generate a beautiful fractal, as you can see from "this Youtube video":http://www.youtube.com/watch?v=G_GBwuYuOOs

Harry wrote the code below.  Although it is the biggest block of code yet seen, and mathematically complex, it only uses three things that are new to us - two of them methods of the built in @Math@ object:
* @Math.sqrt()@ - calculates the square root of a number
* @Math.log()@ - calculates the natural logarithm of a number (it isn't important what this means for our purposes)

There are two things to note about the Math class:
* Calling a method is generally computationally expensive - it takes much longer than a simple number multiplication or something
* Math is singular, not plural, because that is how they say it in America.  In all other respects British and American mathematics are the same.

The other new thing is a similar to a for-loop, except that instead of it being repeated a fixed number of times it gets repeated while a condition holds.

@while (someCondition) {doSomething;}@

<pre><code><html>
 <head>
   <script type="text/javascript">
     window.onload = function() {
       var mandelbrotCanvas = document.getElementById('mandelbrotCanvas');
       var context = mandelbrotCanvas.getContext('2d');

       var width = mandelbrotCanvas.width;
       var height = mandelbrotCanvas.height;

       var max_iter = 1000;
       var saturation = 80;
       var lightness = 50;

       for (i=0;i<width;i++) {
         for (j=0;j<height;j++) {
           /* complicated maths bit starts here */
           var Za = 0;
           var Zb = 0;
           var Ca = 3*i/(width -1) - 2.25;
           var Cb = 2*j/(height-1) - 1;

           var iter = 0;
           var Zas = 0;
           var Zan;
           while((Zas + Zb*Zb) < 4 && iter < max_iter) {
             Zas = Za*Za;
             Zan = Zas - Zb*Zb + Ca;
             Zb = 2*Za*Zb + Cb;
             Za = Zan;
             iter++;
           }
           /* complicated maths bit ends here (apart from one line) */

           if (iter === max_iter) {
             context.fillStyle = 'black';
           } else {
             // another line of maths magic below
             var hue = iter + 1 - Math.log(Math.log(Math.sqrt(Zas + Zb*Zb)))/Math.log(2);
   
             context.fillStyle = 'hsl(' + hue + ', ' + saturation + '%, ' + lightness + '%)';
           }

           context.fillRect(i, j, 1, 1);
         }
       }
     }
   </script>
  </head>
 <body>
   <canvas id="mandelbrotCanvas" width="400" height="200">
   </canvas>
 </body>
</html></code></pre>

which generates a mandelbrot set and colours it in.

<img src="https://github.com/mchapman/WebDevKeyStage2/raw/master/images/mandelbrot.jpg" />

h4. Practical

Either:
* Copy and paste Harry's code and try and find ways of improving it.  There are three fairly simple improvements that can be made without any knowledge of maths.
or
* Take the HSL colour rectangles from earlier in the lesson and try to make a few small changes to generate the following picture in the canvas
<img src="https://github.com/mchapman/WebDevKeyStage2/raw/master/images/images.bmp" />
Hint: Vary the saturation.
